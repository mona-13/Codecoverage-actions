name: Deploy Images to GHCR

on:
  push:
    branches:
      - main

jobs:
  push-to-ghcr:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Read access to the code
      packages: write  # Write access to GHCR
    steps:
      - name: 'Checkout Github Actions'
        uses: actions/checkout@v2
      - name: 'Login to Github Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build and Push the image'
        run: |
          docker build . --tag ghcr.io/${{ github.repository_owner }}/code:v2
          docker push ghcr.io/${{ github.repository_owner }}/code:v2

  DemoSonarCloudScan:
    runs-on: ubuntu-latest
    needs: push-to-ghcr  # Ensures DemoSonarCloudScan runs after the image is pushed
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Use the pre-built image (the one we just built and pushed)
      - name: 'Login to Github Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Pull the newly built image'
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/code:v2

      # Set up Python
      - name: 'Set up Python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install dependencies
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install dependencies from requirements.txt

      # Install Tox
      - name: 'Install Tox and Pytest'
        run: |
          pip install tox pytest  # Ensure pytest is installed along with Tox

      # Run Tox, which will run the tests (including Pytest if configured in tox.ini)
      - name: 'Run Tox Tests and Coverage'
        run: |
          tox --parallel  # Run tests in parallel across environments (e.g., Python 3.8, 3.9)

      # Upload test results and coverage as artifacts
      - name: 'Upload Coverage Report Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml  # Path to the coverage report

      # SonarCloud Scan
      - name: 'SonarCloud Scan'
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=mona-13
            -Dsonar.projectKey=mona-13
            -Dsonar.python.coverage.reportPaths=coverage.xml  # Path to the coverage file
