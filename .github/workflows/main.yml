on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Trigger the workflow on tags like v1, v2, v3, etc.

jobs:
  push-to-ghcr:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Read access to the code
      packages: write  # Write access to GHCR
    steps:
      - name: 'Checkout Github Actions'
        uses: actions/checkout@v2
      - name: 'Login to Github Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build and Push the image'
        run: |
          # Use the Git tag (like v1, v2, etc.) or branch name for the image version
          IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/code:${{ github.ref }}
          docker build . --tag $IMAGE_TAG
          docker push $IMAGE_TAG

  DemoSonarCloudScan:
    runs-on: ubuntu-latest
    needs: push-to-ghcr  # Ensures DemoSonarCloudScan runs after the image is pushed
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Use the pre-built image (the one we just built and pushed)
      - name: 'Login to Github Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Pull the newly built image'
        run: |
          IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/code:${{ github.ref }}
          docker pull $IMAGE_TAG

      - name: Install and set up python
        uses: mona-13/Compositeactions-demo@main

      # Install Tox and Test Dependencies
      - name: 'Install Tox and Test Dependencies'
        run: |
          pip install tox  # Ensure Tox is installed
          pip install pytest pytest-cov coverage  # Ensure Pytest and coverage libraries are installed

      # Run Tox tests and coverage
      - name: 'Run Tox Tests and Coverage'
        run: |
          tox --parallel  # Run tests in parallel across Python environments (e.g., py38, py39)

      # Upload coverage report as an artifact
      - name: 'Upload Coverage Report Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml  # Path to the coverage report generated by Pytest

      # SonarCloud Scan
      - name: 'SonarCloud Scan'
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=mona-13
            -Dsonar.projectKey=mona-13
            -Dsonar.python.coverage.reportPaths=coverage.xml  # Path to the coverage file
