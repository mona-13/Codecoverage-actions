

name: Deploy Images to GHCR

on:
  push:
    branches:
      - main

jobs:
  push-to-ghcr:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Read access to the code
      packages: write  # Write access to GHCR
    steps:
      - name: 'Checkout Github Actions'
        uses: actions/checkout@v2
        
      - name: 'Read current version'
        id: get_version
        run: |
          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
          else
            VERSION="v1"  # Default version if the file doesn't exist
          fi
          echo "Current version: $VERSION"
          echo "::set-output name=version::$VERSION"
          
      - name: 'Increment version'
        id: increment_version
        run: |
          # Extract the numeric version part (e.g., v1 -> 1)
          VERSION_NUM=$(echo ${{ steps.get_version.outputs.version }} | sed 's/v//')
          # Increment version by 1
          NEW_VERSION_NUM=$((VERSION_NUM + 1))
          NEW_VERSION="v$NEW_VERSION_NUM"
          echo "New version: $NEW_VERSION"
          echo $NEW_VERSION > version.txt
          echo "::set-output name=new_version::$NEW_VERSION"
          
      - name: 'Login to Github Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 'Build and Push the image'
        run: |
          docker build . --tag ghcr.io/${{ github.repository_owner }}/code:${{ steps.increment_version.outputs.new_version }}
          docker push ghcr.io/${{ github.repository_owner }}/code:${{ steps.increment_version.outputs.new_version }}

      - name: 'Commit and push updated version'
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add version.txt
          git commit -m "Bump version to ${{ steps.increment_version.outputs.new_version }}"
          git push

  DemoSonarCloudScan:
    runs-on: ubuntu-latest
    needs: push-to-ghcr  # Ensures DemoSonarCloudScan runs after the image is pushed
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Use the pre-built image (the one we just built and pushed)
      - name: 'Login to Github Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Pull the newly built image'
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/code:v2


      - name: Install and set up python
        uses: mona-13/Compositeactions-demo@main
        



          

      # # Set up Python
      # - name: 'Set up Python'
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.x'

      # # Install dependencies
      # - name: 'Install dependencies'
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt  # Install dependencies from requirements.txt

      # Install Tox
      - name: 'Install Tox and Test Dependencies'
        run: |
          pip install tox  # Ensure Tox is installed
          pip install pytest pytest-cov coverage  # Ensure Pytest and coverage libraries are installed

      # Run Tox tests and coverage
      - name: 'Run Tox Tests and Coverage'
        run: |
          tox --parallel  # Run tests in parallel across Python environments (e.g., py38, py39)

      # Upload coverage report as an artifact
      - name: 'Upload Coverage Report Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml  # Path to the coverage report generated by Pytest

      # SonarCloud Scan
      - name: 'SonarCloud Scan'
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=mona-13
            -Dsonar.projectKey=mona-13
            -Dsonar.python.coverage.reportPaths=coverage.xml  # Path to the coverage file
